import json
import random
import string
import argparse
from pathlib import Path
from math import sqrt

# Command-line interface
def main():
    parser = argparse.ArgumentParser(description="Generate synthetic daily_lookup and distance matrix JSON files.")
    parser.add_argument('-n', '--num-players', type=int, default=10,
                        help='Number of player entries to generate')
    parser.add_argument('-o', '--output-dir', type=Path, default=Path('/mnt/data'),
                        help='Directory to save generated JSON files')
    args = parser.parse_args()

    N = args.num_players
    output_dir = args.output_dir
    output_dir.mkdir(parents=True, exist_ok=True)

    teams = ['ATL', 'BOS', 'NYM', 'CHC', 'CIN', 'LAA', 'SEA', 'SD', 'STL', 'MIN']
    positions = ['SP', 'OF', 'C', '1B', '2B', '3B', 'SS']

    # Generate synthetic daily_lookup data
    daily_lookup = []
    for _ in range(N):
        player = f"Player_{''.join(random.choices(string.ascii_uppercase, k=5))}"
        rec = {
            'Cluster': random.randint(0, 7),
            'DKSalary': random.randint(3000, 10000),
            'Ownership': round(random.uniform(0, 50), 1),
            'Player': player,
            'Pos': random.choice(positions),
            'ProjPoints': round(random.uniform(5, 20), 2),
            'Team': random.choice(teams),
        }
        # Compute scaled values (normalize)
        rec['scaled_DKSalary'] = rec['DKSalary'] / 10000
        rec['scaled_Ownership'] = rec['Ownership'] / 50
        rec['scaled_ProjPoints'] = rec['ProjPoints'] / 20
        daily_lookup.append(rec)

    # Write daily_lookup JSON
    lookup_path = output_dir / 'daily_lookup_synth.json'
    with open(lookup_path, 'w') as f:
        json.dump({'data': {'daily_lookup': daily_lookup}}, f, indent=2)

    # Generate synthetic daily_distance_matrix data
    daily_distance_matrix = []
    for rec in daily_lookup:
        row = {'Player': rec['Player']}
        for other in daily_lookup:
            if rec['Player'] == other['Player']:
                dist = 0.0
            else:
                diff_salary = rec['scaled_DKSalary'] - other['scaled_DKSalary']
                diff_points = rec['scaled_ProjPoints'] - other['scaled_ProjPoints']
                diff_ownership = rec['scaled_Ownership'] - other['scaled_Ownership']
                dist = round(sqrt(diff_salary**2 + diff_points**2 + diff_ownership**2), 6)
            row[other['Player']] = dist
        daily_distance_matrix.append(row)

    # Write daily_distance_matrix JSON
    dist_path = output_dir / 'daily_distance_matrix_synth.json'
    with open(dist_path, 'w') as f:
        json.dump({'data': {'daily_distance_matrix': daily_distance_matrix}}, f, indent=2)

    print("Generated synthetic data files:")
    print(f"  daily_lookup: {lookup_path}")
    print(f"  daily_distance_matrix: {dist_path}")

if __name__ == '__main__':
    main()
